{"remainingRequest":"D:\\uinapp\\vue-cloud-disk\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\uinapp\\vue-cloud-disk\\node_modules\\element-ui\\packages\\image\\src\\image-viewer.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\uinapp\\vue-cloud-disk\\node_modules\\element-ui\\packages\\image\\src\\image-viewer.vue","mtime":499162500000},{"path":"D:\\uinapp\\vue-cloud-disk\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1628037320207},{"path":"D:\\uinapp\\vue-cloud-disk\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1628037317753},{"path":"D:\\uinapp\\vue-cloud-disk\\node_modules\\babel-loader\\lib\\index.js","mtime":1628037337839},{"path":"D:\\uinapp\\vue-cloud-disk\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1628037320207},{"path":"D:\\uinapp\\vue-cloud-disk\\node_modules\\vue-loader\\lib\\index.js","mtime":1628037334930}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { on, off } from 'element-ui/src/utils/dom';\nimport { rafThrottle, isFirefox } from 'element-ui/src/utils/util';\nimport { PopupManager } from 'element-ui/src/utils/popup';\n\nconst Mode = {\n  CONTAIN: {\n    name: 'contain',\n    icon: 'el-icon-full-screen'\n  },\n  ORIGINAL: {\n    name: 'original',\n    icon: 'el-icon-c-scale-to-original'\n  }\n};\n\nconst mousewheelEventName = isFirefox() ? 'DOMMouseScroll' : 'mousewheel';\n\nexport default {\n  name: 'elImageViewer',\n\n  props: {\n    urlList: {\n      type: Array,\n      default: () => []\n    },\n    zIndex: {\n      type: Number,\n      default: 2000\n    },\n    onSwitch: {\n      type: Function,\n      default: () => {}\n    },\n    onClose: {\n      type: Function,\n      default: () => {}\n    },\n    initialIndex: {\n      type: Number,\n      default: 0\n    },\n    appendToBody: {\n      type: Boolean,\n      default: true\n    },\n    maskClosable: {\n      type: Boolean,\n      default: true\n    }\n  },\n\n  data() {\n    return {\n      index: this.initialIndex,\n      isShow: false,\n      infinite: true,\n      loading: false,\n      mode: Mode.CONTAIN,\n      transform: {\n        scale: 1,\n        deg: 0,\n        offsetX: 0,\n        offsetY: 0,\n        enableTransition: false\n      }\n    };\n  },\n  computed: {\n    isSingle() {\n      return this.urlList.length <= 1;\n    },\n    isFirst() {\n      return this.index === 0;\n    },\n    isLast() {\n      return this.index === this.urlList.length - 1;\n    },\n    currentImg() {\n      return this.urlList[this.index];\n    },\n    imgStyle() {\n      const { scale, deg, offsetX, offsetY, enableTransition } = this.transform;\n      const style = {\n        transform: `scale(${scale}) rotate(${deg}deg)`,\n        transition: enableTransition ? 'transform .3s' : '',\n        'margin-left': `${offsetX}px`,\n        'margin-top': `${offsetY}px`\n      };\n      if (this.mode === Mode.CONTAIN) {\n        style.maxWidth = style.maxHeight = '100%';\n      }\n      return style;\n    },\n    viewerZIndex() {\n      const nextZIndex = PopupManager.nextZIndex();\n      return this.zIndex > nextZIndex ? this.zIndex : nextZIndex;\n    }\n  },\n  watch: {\n    index: {\n      handler: function(val) {\n        this.reset();\n        this.onSwitch(val);\n      }\n    },\n    currentImg(val) {\n      this.$nextTick(_ => {\n        const $img = this.$refs.img[0];\n        if (!$img.complete) {\n          this.loading = true;\n        }\n      });\n    }\n  },\n  methods: {\n    hide() {\n      this.deviceSupportUninstall();\n      this.onClose();\n    },\n    deviceSupportInstall() {\n      this._keyDownHandler = e => {\n        e.stopPropagation();\n        const keyCode = e.keyCode;\n        switch (keyCode) {\n          // ESC\n          case 27:\n            this.hide();\n            break;\n          // SPACE\n          case 32:\n            this.toggleMode();\n            break;\n          // LEFT_ARROW\n          case 37:\n            this.prev();\n            break;\n          // UP_ARROW\n          case 38:\n            this.handleActions('zoomIn');\n            break;\n          // RIGHT_ARROW\n          case 39:\n            this.next();\n            break;\n          // DOWN_ARROW\n          case 40:\n            this.handleActions('zoomOut');\n            break;\n        }\n      };\n      this._mouseWheelHandler = rafThrottle(e => {\n        const delta = e.wheelDelta ? e.wheelDelta : -e.detail;\n        if (delta > 0) {\n          this.handleActions('zoomIn', {\n            zoomRate: 0.015,\n            enableTransition: false\n          });\n        } else {\n          this.handleActions('zoomOut', {\n            zoomRate: 0.015,\n            enableTransition: false\n          });\n        }\n      });\n      on(document, 'keydown', this._keyDownHandler);\n      on(document, mousewheelEventName, this._mouseWheelHandler);\n    },\n    deviceSupportUninstall() {\n      off(document, 'keydown', this._keyDownHandler);\n      off(document, mousewheelEventName, this._mouseWheelHandler);\n      this._keyDownHandler = null;\n      this._mouseWheelHandler = null;\n    },\n    handleImgLoad(e) {\n      this.loading = false;\n    },\n    handleImgError(e) {\n      this.loading = false;\n      e.target.alt = '加载失败';\n    },\n    handleMouseDown(e) {\n      if (this.loading || e.button !== 0) return;\n\n      const { offsetX, offsetY } = this.transform;\n      const startX = e.pageX;\n      const startY = e.pageY;\n      this._dragHandler = rafThrottle(ev => {\n        this.transform.offsetX = offsetX + ev.pageX - startX;\n        this.transform.offsetY = offsetY + ev.pageY - startY;\n      });\n      on(document, 'mousemove', this._dragHandler);\n      on(document, 'mouseup', ev => {\n        off(document, 'mousemove', this._dragHandler);\n      });\n\n      e.preventDefault();\n    },\n    handleMaskClick() {\n      if (this.maskClosable) {\n        this.hide();\n      }\n    },\n    reset() {\n      this.transform = {\n        scale: 1,\n        deg: 0,\n        offsetX: 0,\n        offsetY: 0,\n        enableTransition: false\n      };\n    },\n    toggleMode() {\n      if (this.loading) return;\n\n      const modeNames = Object.keys(Mode);\n      const modeValues = Object.values(Mode);\n      const index = modeValues.indexOf(this.mode);\n      const nextIndex = (index + 1) % modeNames.length;\n      this.mode = Mode[modeNames[nextIndex]];\n      this.reset();\n    },\n    prev() {\n      if (this.isFirst && !this.infinite) return;\n      const len = this.urlList.length;\n      this.index = (this.index - 1 + len) % len;\n    },\n    next() {\n      if (this.isLast && !this.infinite) return;\n      const len = this.urlList.length;\n      this.index = (this.index + 1) % len;\n    },\n    handleActions(action, options = {}) {\n      if (this.loading) return;\n      const { zoomRate, rotateDeg, enableTransition } = {\n        zoomRate: 0.2,\n        rotateDeg: 90,\n        enableTransition: true,\n        ...options\n      };\n      const { transform } = this;\n      switch (action) {\n        case 'zoomOut':\n          if (transform.scale > 0.2) {\n            transform.scale = parseFloat((transform.scale - zoomRate).toFixed(3));\n          }\n          break;\n        case 'zoomIn':\n          transform.scale = parseFloat((transform.scale + zoomRate).toFixed(3));\n          break;\n        case 'clocelise':\n          transform.deg += rotateDeg;\n          break;\n        case 'anticlocelise':\n          transform.deg -= rotateDeg;\n          break;\n      }\n      transform.enableTransition = enableTransition;\n    }\n  },\n  mounted() {\n    this.deviceSupportInstall();\n    if (this.appendToBody) {\n      document.body.appendChild(this.$el);\n    }\n    // add tabindex then wrapper can be focusable via Javascript\n    // focus wrapper so arrow key can't cause inner scroll behavior underneath\n    this.$refs['el-image-viewer__wrapper'].focus();\n  },\n  destroyed() {\n    // if appendToBody is true, remove DOM node after destroy\n    if (this.appendToBody && this.$el && this.$el.parentNode) {\n      this.$el.parentNode.removeChild(this.$el);\n    }\n  }\n};\n",{"version":3,"sources":["image-viewer.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsfile":"image-viewer.vue","sourceRoot":"node_modules/element-ui/packages/image/src","sourcesContent":["<template>\n  <transition name=\"viewer-fade\">\n    <div tabindex=\"-1\" ref=\"el-image-viewer__wrapper\" class=\"el-image-viewer__wrapper\" :style=\"{ 'z-index': viewerZIndex }\">\n      <div class=\"el-image-viewer__mask\" @click.self=\"handleMaskClick\"></div>\n      <!-- CLOSE -->\n      <span class=\"el-image-viewer__btn el-image-viewer__close\" @click=\"hide\">\n        <i class=\"el-icon-close\"></i>\n      </span>\n      <!-- ARROW -->\n      <template v-if=\"!isSingle\">\n        <span\n          class=\"el-image-viewer__btn el-image-viewer__prev\"\n          :class=\"{ 'is-disabled': !infinite && isFirst }\"\n          @click=\"prev\">\n          <i class=\"el-icon-arrow-left\"/>\n        </span>\n        <span\n          class=\"el-image-viewer__btn el-image-viewer__next\"\n          :class=\"{ 'is-disabled': !infinite && isLast }\"\n          @click=\"next\">\n          <i class=\"el-icon-arrow-right\"/>\n        </span>\n      </template>\n      <!-- ACTIONS -->\n      <div class=\"el-image-viewer__btn el-image-viewer__actions\">\n        <div class=\"el-image-viewer__actions__inner\">\n          <i class=\"el-icon-zoom-out\" @click=\"handleActions('zoomOut')\"></i>\n          <i class=\"el-icon-zoom-in\" @click=\"handleActions('zoomIn')\"></i>\n          <i class=\"el-image-viewer__actions__divider\"></i>\n          <i :class=\"mode.icon\" @click=\"toggleMode\"></i>\n          <i class=\"el-image-viewer__actions__divider\"></i>\n          <i class=\"el-icon-refresh-left\" @click=\"handleActions('anticlocelise')\"></i>\n          <i class=\"el-icon-refresh-right\" @click=\"handleActions('clocelise')\"></i>\n        </div>\n      </div>\n      <!-- CANVAS -->\n      <div class=\"el-image-viewer__canvas\">\n        <img\n          v-for=\"(url, i) in urlList\"\n          v-if=\"i === index\"\n          ref=\"img\"\n          class=\"el-image-viewer__img\"\n          :key=\"url\"\n          :src=\"currentImg\"\n          :style=\"imgStyle\"\n          @load=\"handleImgLoad\"\n          @error=\"handleImgError\"\n          @mousedown=\"handleMouseDown\">\n      </div>\n    </div>\n  </transition>\n</template>\n\n<script>\nimport { on, off } from 'element-ui/src/utils/dom';\nimport { rafThrottle, isFirefox } from 'element-ui/src/utils/util';\nimport { PopupManager } from 'element-ui/src/utils/popup';\n\nconst Mode = {\n  CONTAIN: {\n    name: 'contain',\n    icon: 'el-icon-full-screen'\n  },\n  ORIGINAL: {\n    name: 'original',\n    icon: 'el-icon-c-scale-to-original'\n  }\n};\n\nconst mousewheelEventName = isFirefox() ? 'DOMMouseScroll' : 'mousewheel';\n\nexport default {\n  name: 'elImageViewer',\n\n  props: {\n    urlList: {\n      type: Array,\n      default: () => []\n    },\n    zIndex: {\n      type: Number,\n      default: 2000\n    },\n    onSwitch: {\n      type: Function,\n      default: () => {}\n    },\n    onClose: {\n      type: Function,\n      default: () => {}\n    },\n    initialIndex: {\n      type: Number,\n      default: 0\n    },\n    appendToBody: {\n      type: Boolean,\n      default: true\n    },\n    maskClosable: {\n      type: Boolean,\n      default: true\n    }\n  },\n\n  data() {\n    return {\n      index: this.initialIndex,\n      isShow: false,\n      infinite: true,\n      loading: false,\n      mode: Mode.CONTAIN,\n      transform: {\n        scale: 1,\n        deg: 0,\n        offsetX: 0,\n        offsetY: 0,\n        enableTransition: false\n      }\n    };\n  },\n  computed: {\n    isSingle() {\n      return this.urlList.length <= 1;\n    },\n    isFirst() {\n      return this.index === 0;\n    },\n    isLast() {\n      return this.index === this.urlList.length - 1;\n    },\n    currentImg() {\n      return this.urlList[this.index];\n    },\n    imgStyle() {\n      const { scale, deg, offsetX, offsetY, enableTransition } = this.transform;\n      const style = {\n        transform: `scale(${scale}) rotate(${deg}deg)`,\n        transition: enableTransition ? 'transform .3s' : '',\n        'margin-left': `${offsetX}px`,\n        'margin-top': `${offsetY}px`\n      };\n      if (this.mode === Mode.CONTAIN) {\n        style.maxWidth = style.maxHeight = '100%';\n      }\n      return style;\n    },\n    viewerZIndex() {\n      const nextZIndex = PopupManager.nextZIndex();\n      return this.zIndex > nextZIndex ? this.zIndex : nextZIndex;\n    }\n  },\n  watch: {\n    index: {\n      handler: function(val) {\n        this.reset();\n        this.onSwitch(val);\n      }\n    },\n    currentImg(val) {\n      this.$nextTick(_ => {\n        const $img = this.$refs.img[0];\n        if (!$img.complete) {\n          this.loading = true;\n        }\n      });\n    }\n  },\n  methods: {\n    hide() {\n      this.deviceSupportUninstall();\n      this.onClose();\n    },\n    deviceSupportInstall() {\n      this._keyDownHandler = e => {\n        e.stopPropagation();\n        const keyCode = e.keyCode;\n        switch (keyCode) {\n          // ESC\n          case 27:\n            this.hide();\n            break;\n          // SPACE\n          case 32:\n            this.toggleMode();\n            break;\n          // LEFT_ARROW\n          case 37:\n            this.prev();\n            break;\n          // UP_ARROW\n          case 38:\n            this.handleActions('zoomIn');\n            break;\n          // RIGHT_ARROW\n          case 39:\n            this.next();\n            break;\n          // DOWN_ARROW\n          case 40:\n            this.handleActions('zoomOut');\n            break;\n        }\n      };\n      this._mouseWheelHandler = rafThrottle(e => {\n        const delta = e.wheelDelta ? e.wheelDelta : -e.detail;\n        if (delta > 0) {\n          this.handleActions('zoomIn', {\n            zoomRate: 0.015,\n            enableTransition: false\n          });\n        } else {\n          this.handleActions('zoomOut', {\n            zoomRate: 0.015,\n            enableTransition: false\n          });\n        }\n      });\n      on(document, 'keydown', this._keyDownHandler);\n      on(document, mousewheelEventName, this._mouseWheelHandler);\n    },\n    deviceSupportUninstall() {\n      off(document, 'keydown', this._keyDownHandler);\n      off(document, mousewheelEventName, this._mouseWheelHandler);\n      this._keyDownHandler = null;\n      this._mouseWheelHandler = null;\n    },\n    handleImgLoad(e) {\n      this.loading = false;\n    },\n    handleImgError(e) {\n      this.loading = false;\n      e.target.alt = '加载失败';\n    },\n    handleMouseDown(e) {\n      if (this.loading || e.button !== 0) return;\n\n      const { offsetX, offsetY } = this.transform;\n      const startX = e.pageX;\n      const startY = e.pageY;\n      this._dragHandler = rafThrottle(ev => {\n        this.transform.offsetX = offsetX + ev.pageX - startX;\n        this.transform.offsetY = offsetY + ev.pageY - startY;\n      });\n      on(document, 'mousemove', this._dragHandler);\n      on(document, 'mouseup', ev => {\n        off(document, 'mousemove', this._dragHandler);\n      });\n\n      e.preventDefault();\n    },\n    handleMaskClick() {\n      if (this.maskClosable) {\n        this.hide();\n      }\n    },\n    reset() {\n      this.transform = {\n        scale: 1,\n        deg: 0,\n        offsetX: 0,\n        offsetY: 0,\n        enableTransition: false\n      };\n    },\n    toggleMode() {\n      if (this.loading) return;\n\n      const modeNames = Object.keys(Mode);\n      const modeValues = Object.values(Mode);\n      const index = modeValues.indexOf(this.mode);\n      const nextIndex = (index + 1) % modeNames.length;\n      this.mode = Mode[modeNames[nextIndex]];\n      this.reset();\n    },\n    prev() {\n      if (this.isFirst && !this.infinite) return;\n      const len = this.urlList.length;\n      this.index = (this.index - 1 + len) % len;\n    },\n    next() {\n      if (this.isLast && !this.infinite) return;\n      const len = this.urlList.length;\n      this.index = (this.index + 1) % len;\n    },\n    handleActions(action, options = {}) {\n      if (this.loading) return;\n      const { zoomRate, rotateDeg, enableTransition } = {\n        zoomRate: 0.2,\n        rotateDeg: 90,\n        enableTransition: true,\n        ...options\n      };\n      const { transform } = this;\n      switch (action) {\n        case 'zoomOut':\n          if (transform.scale > 0.2) {\n            transform.scale = parseFloat((transform.scale - zoomRate).toFixed(3));\n          }\n          break;\n        case 'zoomIn':\n          transform.scale = parseFloat((transform.scale + zoomRate).toFixed(3));\n          break;\n        case 'clocelise':\n          transform.deg += rotateDeg;\n          break;\n        case 'anticlocelise':\n          transform.deg -= rotateDeg;\n          break;\n      }\n      transform.enableTransition = enableTransition;\n    }\n  },\n  mounted() {\n    this.deviceSupportInstall();\n    if (this.appendToBody) {\n      document.body.appendChild(this.$el);\n    }\n    // add tabindex then wrapper can be focusable via Javascript\n    // focus wrapper so arrow key can't cause inner scroll behavior underneath\n    this.$refs['el-image-viewer__wrapper'].focus();\n  },\n  destroyed() {\n    // if appendToBody is true, remove DOM node after destroy\n    if (this.appendToBody && this.$el && this.$el.parentNode) {\n      this.$el.parentNode.removeChild(this.$el);\n    }\n  }\n};\n</script>\n"]}]}